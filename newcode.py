import subprocess
import json
from html.parser import HTMLParser
from tkinter import *

root = Tk()
root.title("Vulnerability Management")
root.geometry("500x500")

class MLStripper(HTMLParser):
    def __init__(self):
        super().__init__()
        self.reset()
        self.strict = False
        self.convert_charrefs = True
        self.fed = []

    def handle_data(self, d):
        self.fed.append(d)

    def get_data(self):
        return ''.join(self.fed)


def strip_tags(html):
    s = MLStripper()
    s.feed(html)
    return s.get_data()


def process_data(input_arg):
    script_path = 'z1 (2).sh'  # Replace with your Bash script path

    # Run bash script with input argument
    subprocess.run(['bash', script_path, input_arg])

    # Load JSON data
    with open('report.json', 'r') as json_file:
        data = json.load(json_file)

    # Extract relevant fields and clean HTML tags
    cleaned_data = []
    for site in data['site']:
        for alert in site['alerts']:
            cleaned_alert = {
                'alerts': alert['name'],
                'riskdesc': alert['riskdesc'],
                'desc': strip_tags(alert['desc']),
                'solution': strip_tags(alert['solution']),
            }
            cleaned_data.append(cleaned_alert)

    # Create HTML report
    with open('cleaner.json', 'r') as json_file:
        data = json.load(json_file)
    with open('cleaner.json', 'w') as output_file:
        json.dump(cleaned_data, output_file, indent=4)
    html_file = 'cleaner.html'
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write('<!DOCTYPE html>\n<html>\n<head>\n<title>JSON to HTML</title>\n')
        f.write('<style>\ntable, th, td {\nborder: 1px solid black;\nborder-collapse: collapse;\npadding: 5px;\n}\n</style>\n')
        f.write('</head>\n<body>\n')

        f.write('<table>\n')

        # Write table header
        f.write('<tr>\n')
        if data:
            first_item = data[0]
            keys = first_item.keys()
            for key in keys:
                f.write(f'<th>{key}</th>\n')
        f.write('</tr>\n')

        # Write table rows
        for item in data:
            if 'riskdesc' in item:
                riskdesc = item['riskdesc'].lower().split()[0]
                if riskdesc == 'high':
                    bg_color = 'red'
                elif riskdesc == 'medium':
                    bg_color = 'yellow'
                elif riskdesc == 'low':
                    bg_color = 'green'
                else:
                    bg_color = 'white'
            else:
                bg_color = 'white'

            f.write(f'<tr style="background-color: {bg_color};">\n')
            for key in keys:
                value = item.get(key, '')
                f.write(f'<td>{value}</td>\n')
            f.write('</tr>\n')

        f.write('</table>\n')

        f.write('</body>\n</html>')

    print(f"JSON data has been converted to {html_file}")


# Example usage
input_arg = 'https://example.com/'  # Replace with your input value
l = Label(root,text="Enter URL:")
l.pack()

e = Entry(root)
e.pack()

btn = Button(root,text="submit",command=lambda:process_data(e.get()))
btn.pack()

root.mainloop()
#process_data(input_arg)


