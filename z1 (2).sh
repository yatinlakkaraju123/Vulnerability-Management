#!/bin/bash

# Set the path to the ZAP log file
log_file="/home/yatin/.ZAP/zap.log"

# Set the initial position in the file
last_position=$(wc -c < "$log_file")

# Get the hostname
hostname=$(hostname)

# Function to monitor the ZAP log file
monitor_log() {
    while inotifywait -e modify "$log_file"; do
        # Get the new position in the file
        new_position=$(wc -c < "$log_file")

        # Calculate the difference in position
        diff=$(($new_position - $last_position))

        # If there's new content in the file
        if [ $diff -gt 0 ]; then
            # Extract the new content and send it to Graylog
            tail -c +$(($last_position + 1)) "$log_file" | while IFS= read -r line; do
                # Construct JSON message
                json_message=$(echo -n "$line" | jq -s -R '{ "version": "1.1", "host": "'"$hostname"'", "short_message": ., "level": 5, "_some_info": "foo" }')

                # Send JSON message to Graylog via UDP
                echo "$json_message" | nc -w0 -u 127.0.0.1 12201
            done
            # Update the last position
            last_position=$new_position
        fi
    done
}

# Check if a website URL is provided as an argument
if [ -z "$1" ]; then
    echo "Please provide a website URL as an argument."
    exit 1
fi

# Set the website URL from the command-line argument
website_url="$1"

# Start ZAP attack on the specified website
zap_report="/home/yatin/Documents/projects/ECS/report.json"  # Path to save JSON report
/usr/local/bin/zap.sh -quickurl "$website_url" -quickout "$zap_report" 
/home/yatin/Documents/projects/ECS/z2.sh "$website_url"
python3 jsonclean.py
python3 j2h.py
# Monitor ZAP log file
monitor_log &



